"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _rethinkdb = _interopRequireDefault(require("rethinkdb"));
var _koaCompose = _interopRequireDefault(require("koa-compose"));
var _commonDatabaseFunctionality = require("../../../../../utility/middleware/commonDatabaseFunctionality.js");



class RestApi {
  constructor(urlPrefix) {
    this.urlPrefix = urlPrefix;
  }

  route() {
    return (0, _koaCompose.default)([
    (0, _commonDatabaseFunctionality.handleConnection)(),
    async (context, next) => {
      if (context.request.method != 'GET') return await next();
      console.log('SZN - Inside GET <REST API>/*');
      let url = context.request.url;
      url = url.replace(this.urlPrefix, '');
      url = url.substring(url).split('?')[0];
      let pathArray = url.split('/').filter(x => x);
      let lastPath = pathArray.slice(-1)[0];
      pathArray[pathArray.length - 1] = lastPath.slice(0, lastPath.indexOf('.'));
      if (lastPath.substr(lastPath.indexOf('.') + 1) != 'json') return await next();

      context.status = 200;



      let query = _rethinkdb.default.table(pathArray[0]);

      pathArray.shift();



      if (pathArray[0]) query = query.withFields(pathArray[0])(pathArray[0]);
      pathArray.shift();
      pathArray.forEach(pathSection => query = query(pathSection));

      query = query.run(context.rethinkdbConnection);

      if (!pathArray[1] || true) {
        query = query.then(cursor => {
          return cursor.toArray();
        });
      }

      await query.
      then(result => {
        context.body = result;
      }).
      catch(error => {
        throw error;
      });

      return;
    }]);

  }}exports.default = RestApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS9taWRkbGV3YXJlL3Jlc3RFbmRwb2ludEFwaS5qcyJdLCJuYW1lcyI6WyJSZXN0QXBpIiwiY29uc3RydWN0b3IiLCJ1cmxQcmVmaXgiLCJyb3V0ZSIsImNvbnRleHQiLCJuZXh0IiwicmVxdWVzdCIsIm1ldGhvZCIsImNvbnNvbGUiLCJsb2ciLCJ1cmwiLCJyZXBsYWNlIiwic3Vic3RyaW5nIiwic3BsaXQiLCJwYXRoQXJyYXkiLCJmaWx0ZXIiLCJ4IiwibGFzdFBhdGgiLCJzbGljZSIsImxlbmd0aCIsImluZGV4T2YiLCJzdWJzdHIiLCJzdGF0dXMiLCJxdWVyeSIsInIiLCJ0YWJsZSIsInNoaWZ0Iiwid2l0aEZpZWxkcyIsImZvckVhY2giLCJwYXRoU2VjdGlvbiIsInJ1biIsInJldGhpbmtkYkNvbm5lY3Rpb24iLCJ0aGVuIiwiY3Vyc29yIiwidG9BcnJheSIsInJlc3VsdCIsImJvZHkiLCJjYXRjaCIsImVycm9yIl0sIm1hcHBpbmdzIjoieUxBQUE7QUFDQTtBQUNBOzs7O0FBSWUsTUFBTUEsT0FBTixDQUFjO0FBQzNCQyxFQUFBQSxXQUFXLENBQUNDLFNBQUQsRUFBWTtBQUNyQixTQUFLQSxTQUFMLEdBQWlCQSxTQUFqQjtBQUNEOztBQUVEQyxFQUFBQSxLQUFLLEdBQUc7QUFDTixXQUFPLHlCQUFRO0FBQ2Isd0RBRGE7QUFFYixXQUFPQyxPQUFQLEVBQWdCQyxJQUFoQixLQUF5QjtBQUN2QixVQUFJRCxPQUFPLENBQUNFLE9BQVIsQ0FBZ0JDLE1BQWhCLElBQTBCLEtBQTlCLEVBQXFDLE9BQU8sTUFBTUYsSUFBSSxFQUFqQjtBQUNyQ0csTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksK0JBQVo7QUFDQSxVQUFJQyxHQUFHLEdBQUdOLE9BQU8sQ0FBQ0UsT0FBUixDQUFnQkksR0FBMUI7QUFDQUEsTUFBQUEsR0FBRyxHQUFHQSxHQUFHLENBQUNDLE9BQUosQ0FBWSxLQUFLVCxTQUFqQixFQUE0QixFQUE1QixDQUFOO0FBQ0FRLE1BQUFBLEdBQUcsR0FBR0EsR0FBRyxDQUFDRSxTQUFKLENBQWNGLEdBQWQsRUFBbUJHLEtBQW5CLENBQXlCLEdBQXpCLEVBQThCLENBQTlCLENBQU47QUFDQSxVQUFJQyxTQUFTLEdBQUdKLEdBQUcsQ0FBQ0csS0FBSixDQUFVLEdBQVYsRUFBZUUsTUFBZixDQUFzQkMsQ0FBQyxJQUFJQSxDQUEzQixDQUFoQjtBQUNBLFVBQUlDLFFBQVEsR0FBR0gsU0FBUyxDQUFDSSxLQUFWLENBQWdCLENBQUMsQ0FBakIsRUFBb0IsQ0FBcEIsQ0FBZjtBQUNBSixNQUFBQSxTQUFTLENBQUNBLFNBQVMsQ0FBQ0ssTUFBVixHQUFtQixDQUFwQixDQUFULEdBQWtDRixRQUFRLENBQUNDLEtBQVQsQ0FBZSxDQUFmLEVBQWtCRCxRQUFRLENBQUNHLE9BQVQsQ0FBaUIsR0FBakIsQ0FBbEIsQ0FBbEM7QUFDQSxVQUFJSCxRQUFRLENBQUNJLE1BQVQsQ0FBZ0JKLFFBQVEsQ0FBQ0csT0FBVCxDQUFpQixHQUFqQixJQUF3QixDQUF4QyxLQUE4QyxNQUFsRCxFQUEwRCxPQUFPLE1BQU1mLElBQUksRUFBakI7O0FBRTFERCxNQUFBQSxPQUFPLENBQUNrQixNQUFSLEdBQWlCLEdBQWpCOzs7O0FBSUEsVUFBSUMsS0FBSyxHQUFHQyxtQkFBRUMsS0FBRixDQUFRWCxTQUFTLENBQUMsQ0FBRCxDQUFqQixDQUFaOztBQUVBQSxNQUFBQSxTQUFTLENBQUNZLEtBQVY7Ozs7QUFJQSxVQUFJWixTQUFTLENBQUMsQ0FBRCxDQUFiLEVBQWtCUyxLQUFLLEdBQUdBLEtBQUssQ0FBQ0ksVUFBTixDQUFpQmIsU0FBUyxDQUFDLENBQUQsQ0FBMUIsRUFBK0JBLFNBQVMsQ0FBQyxDQUFELENBQXhDLENBQVI7QUFDbEJBLE1BQUFBLFNBQVMsQ0FBQ1ksS0FBVjtBQUNBWixNQUFBQSxTQUFTLENBQUNjLE9BQVYsQ0FBa0JDLFdBQVcsSUFBS04sS0FBSyxHQUFHQSxLQUFLLENBQUNNLFdBQUQsQ0FBL0M7O0FBRUFOLE1BQUFBLEtBQUssR0FBR0EsS0FBSyxDQUFDTyxHQUFOLENBQVUxQixPQUFPLENBQUMyQixtQkFBbEIsQ0FBUjs7QUFFQSxVQUFJLENBQUNqQixTQUFTLENBQUMsQ0FBRCxDQUFWLElBQWlCLElBQXJCLEVBQTJCO0FBQ3pCUyxRQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ1MsSUFBTixDQUFXQyxNQUFNLElBQUk7QUFDM0IsaUJBQU9BLE1BQU0sQ0FBQ0MsT0FBUCxFQUFQO0FBQ0QsU0FGTyxDQUFSO0FBR0Q7O0FBRUQsWUFBTVgsS0FBSztBQUNSUyxNQUFBQSxJQURHLENBQ0VHLE1BQU0sSUFBSTtBQUNkL0IsUUFBQUEsT0FBTyxDQUFDZ0MsSUFBUixHQUFlRCxNQUFmO0FBQ0QsT0FIRztBQUlIRSxNQUFBQSxLQUpHLENBSUdDLEtBQUssSUFBSTtBQUNkLGNBQU1BLEtBQU47QUFDRCxPQU5HLENBQU47O0FBUUE7QUFDRCxLQTVDWSxDQUFSLENBQVA7O0FBOENELEdBcEQwQixDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHIgZnJvbSAncmV0aGlua2RiJ1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAna29hLWNvbXBvc2UnXG5pbXBvcnQgeyBoYW5kbGVDb25uZWN0aW9uLCBjcmVhdGVEYXRhYmFzZSwgY3JlYXRlVGFibGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlsaXR5L21pZGRsZXdhcmUvY29tbW9uRGF0YWJhc2VGdW5jdGlvbmFsaXR5LmpzJ1xuXG4vLyBOT1RFOiBob3N0L2FwaS92MS88dGFibGVOYW1lPi88aGF2aW5nRmllbGQ+LzxzdWJmaWVsZC1yZWN1cnNpdmU+Lmpzb25cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzdEFwaSB7XG4gIGNvbnN0cnVjdG9yKHVybFByZWZpeCkge1xuICAgIHRoaXMudXJsUHJlZml4ID0gdXJsUHJlZml4XG4gIH1cblxuICByb3V0ZSgpIHtcbiAgICByZXR1cm4gY29tcG9zZShbXG4gICAgICBoYW5kbGVDb25uZWN0aW9uKCksXG4gICAgICBhc3luYyAoY29udGV4dCwgbmV4dCkgPT4ge1xuICAgICAgICBpZiAoY29udGV4dC5yZXF1ZXN0Lm1ldGhvZCAhPSAnR0VUJykgcmV0dXJuIGF3YWl0IG5leHQoKSAvLyBpZiBub3QgR0VUXG4gICAgICAgIGNvbnNvbGUubG9nKCdTWk4gLSBJbnNpZGUgR0VUIDxSRVNUIEFQST4vKicpXG4gICAgICAgIGxldCB1cmwgPSBjb250ZXh0LnJlcXVlc3QudXJsIC8vIHVybCBwYXRoIHdpdGggcGFyYW1ldGVyc1xuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSh0aGlzLnVybFByZWZpeCwgJycpIC8vIHJlbW92ZSBwcmVmaXhcbiAgICAgICAgdXJsID0gdXJsLnN1YnN0cmluZyh1cmwpLnNwbGl0KCc/JylbMF0gLy8gcmVtb3ZlIHF1ZXJ5IHBhcmFtZXRlcnNcbiAgICAgICAgbGV0IHBhdGhBcnJheSA9IHVybC5zcGxpdCgnLycpLmZpbHRlcih4ID0+IHgpIC8vIHBhdGggc2VjdGlvbnMgYXJyYXlcbiAgICAgICAgbGV0IGxhc3RQYXRoID0gcGF0aEFycmF5LnNsaWNlKC0xKVswXSAvLyBnZXQgbGFzdCBhcnJheSBlbGVtZW50XG4gICAgICAgIHBhdGhBcnJheVtwYXRoQXJyYXkubGVuZ3RoIC0gMV0gPSBsYXN0UGF0aC5zbGljZSgwLCBsYXN0UGF0aC5pbmRleE9mKCcuJykpIC8vIHJlbW92ZSAuanNvbiBlbmRpbmdcbiAgICAgICAgaWYgKGxhc3RQYXRoLnN1YnN0cihsYXN0UGF0aC5pbmRleE9mKCcuJykgKyAxKSAhPSAnanNvbicpIHJldHVybiBhd2FpdCBuZXh0KCkgLy8gaWYgd2l0aG91dCAuanNvbiBlbmRpbmdcblxuICAgICAgICBjb250ZXh0LnN0YXR1cyA9IDIwMFxuXG4gICAgICAgIC8vIC53aXRoRmllbGRzKCdkb21haW5zJykoJ2RvbWFpbnMnKSgneGNvbScpKCdwYXRoJylcblxuICAgICAgICBsZXQgcXVlcnkgPSByLnRhYmxlKHBhdGhBcnJheVswXSkgLy8gZmlyc3QgZmllbGQgYXNzaWducyBuYW1lIG9mIHRhYmxlXG5cbiAgICAgICAgcGF0aEFycmF5LnNoaWZ0KClcblxuICAgICAgICAvLyBpZihwYXRoQXJyYXlbMV0pIHF1ZXJ5ID0gcXVlcnkuZ2V0KHBhdGhBcnJheVsxXSlcblxuICAgICAgICBpZiAocGF0aEFycmF5WzBdKSBxdWVyeSA9IHF1ZXJ5LndpdGhGaWVsZHMocGF0aEFycmF5WzBdKShwYXRoQXJyYXlbMF0pXG4gICAgICAgIHBhdGhBcnJheS5zaGlmdCgpXG4gICAgICAgIHBhdGhBcnJheS5mb3JFYWNoKHBhdGhTZWN0aW9uID0+IChxdWVyeSA9IHF1ZXJ5KHBhdGhTZWN0aW9uKSkpXG5cbiAgICAgICAgcXVlcnkgPSBxdWVyeS5ydW4oY29udGV4dC5yZXRoaW5rZGJDb25uZWN0aW9uKVxuXG4gICAgICAgIGlmICghcGF0aEFycmF5WzFdIHx8IHRydWUpIHtcbiAgICAgICAgICBxdWVyeSA9IHF1ZXJ5LnRoZW4oY3Vyc29yID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjdXJzb3IudG9BcnJheSgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHF1ZXJ5XG4gICAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgIGNvbnRleHQuYm9keSA9IHJlc3VsdFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIHRocm93IGVycm9yXG4gICAgICAgICAgfSlcblxuICAgICAgICByZXR1cm5cbiAgICAgIH0sXG4gICAgXSlcbiAgfVxufVxuIl19